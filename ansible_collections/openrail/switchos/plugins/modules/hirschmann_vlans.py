#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2019 Red Hat
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for hirschmann_vlans
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
  'metadata_version': '1.1',
  'status': ['preview'],
  'supported_by': 'network'
}

DOCUMENTATION = """
---
module: hirschmann_vlans
version_added: 0.1
short_description: Create VLAN and manage VLAN configurations on Hirschmann switches.
description: Create VLAN and manage VLAN configurations on Hirschmann switches.
author: Hackerman
notes:
  - Tested against nothing.
options:
  config:
    description: A dictionary of Vlan options
    type: list
    elements: dict
    suboptions:
      vlan_id:
        description:
          - Vlan ID.
        type: int
        required: true
      name:
        description:
          - Name of VLAN.          
        type: str
  state:
    description:
      - The state the configuration should be left in.
    type: str
    choices:
      - merged
      - deleted
    default: merged
"""
EXAMPLES = """
# Using merged

# Before state:
# -------------
# vlan 1

- name: Merge provided configuration with device configuration.
  nxos_vlans:
    config:
      - vlan_id: 5
        name: test-vlan5
      - vlan_id: 10
    state: merged

# After state:
# ------------
# vlan 5
#   name test-vlan5
# vlan 10


# Using merged

# Before state:
# -------------
# vlan 1
# vlan 5
# vlan 10

- name: Delete vlans.
  nxos_vlans:
    config:
      - vlan_id: 5
      - vlan_id: 10
    state: deleted

# After state:
# ------------
# vlan 1


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.openrail.switchos.plugins.module_utils.network.hirschmann.argspec.vlans.vlans import VlansArgs
from ansible_collections.openrail.switchos.plugins.module_utils.network.hirschmann.config.vlans.vlans import Vlans


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=VlansArgs.argument_spec,
                           supports_check_mode=True)

    result = Vlans(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
